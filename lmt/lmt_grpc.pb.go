// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package lmt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LakeMetadataTrackerClient is the client API for LakeMetadataTracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LakeMetadataTrackerClient interface {
	PutEntry(ctx context.Context, in *PutEntryRequest, opts ...grpc.CallOption) (*PutEntryResponse, error)
	GetEntry(ctx context.Context, in *GetEntryRequest, opts ...grpc.CallOption) (*GetEntryResponse, error)
	DeleteEntry(ctx context.Context, in *DeleteEntryRequest, opts ...grpc.CallOption) (*DeleteEntryResponse, error)
	ListEntries(ctx context.Context, in *ListEntriesRequest, opts ...grpc.CallOption) (*ListEntriesResponse, error)
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error)
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error)
	CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error)
	GetBranch(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*GetBranchResponse, error)
	ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesResponse, error)
	Diff(ctx context.Context, in *DiffRequest, opts ...grpc.CallOption) (*DiffResponse, error)
	Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*MergeResponse, error)
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error)
	Revert(ctx context.Context, in *RevertRequest, opts ...grpc.CallOption) (*RevertResponse, error)
}

type lakeMetadataTrackerClient struct {
	cc grpc.ClientConnInterface
}

func NewLakeMetadataTrackerClient(cc grpc.ClientConnInterface) LakeMetadataTrackerClient {
	return &lakeMetadataTrackerClient{cc}
}

func (c *lakeMetadataTrackerClient) PutEntry(ctx context.Context, in *PutEntryRequest, opts ...grpc.CallOption) (*PutEntryResponse, error) {
	out := new(PutEntryResponse)
	err := c.cc.Invoke(ctx, "/lakefs.v1.LakeMetadataTracker/PutEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lakeMetadataTrackerClient) GetEntry(ctx context.Context, in *GetEntryRequest, opts ...grpc.CallOption) (*GetEntryResponse, error) {
	out := new(GetEntryResponse)
	err := c.cc.Invoke(ctx, "/lakefs.v1.LakeMetadataTracker/GetEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lakeMetadataTrackerClient) DeleteEntry(ctx context.Context, in *DeleteEntryRequest, opts ...grpc.CallOption) (*DeleteEntryResponse, error) {
	out := new(DeleteEntryResponse)
	err := c.cc.Invoke(ctx, "/lakefs.v1.LakeMetadataTracker/DeleteEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lakeMetadataTrackerClient) ListEntries(ctx context.Context, in *ListEntriesRequest, opts ...grpc.CallOption) (*ListEntriesResponse, error) {
	out := new(ListEntriesResponse)
	err := c.cc.Invoke(ctx, "/lakefs.v1.LakeMetadataTracker/ListEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lakeMetadataTrackerClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitResponse, error) {
	out := new(CommitResponse)
	err := c.cc.Invoke(ctx, "/lakefs.v1.LakeMetadataTracker/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lakeMetadataTrackerClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*LogResponse, error) {
	out := new(LogResponse)
	err := c.cc.Invoke(ctx, "/lakefs.v1.LakeMetadataTracker/Log", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lakeMetadataTrackerClient) CreateBranch(ctx context.Context, in *CreateBranchRequest, opts ...grpc.CallOption) (*CreateBranchResponse, error) {
	out := new(CreateBranchResponse)
	err := c.cc.Invoke(ctx, "/lakefs.v1.LakeMetadataTracker/CreateBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lakeMetadataTrackerClient) GetBranch(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*GetBranchResponse, error) {
	out := new(GetBranchResponse)
	err := c.cc.Invoke(ctx, "/lakefs.v1.LakeMetadataTracker/GetBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lakeMetadataTrackerClient) ListBranches(ctx context.Context, in *ListBranchesRequest, opts ...grpc.CallOption) (*ListBranchesResponse, error) {
	out := new(ListBranchesResponse)
	err := c.cc.Invoke(ctx, "/lakefs.v1.LakeMetadataTracker/ListBranches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lakeMetadataTrackerClient) Diff(ctx context.Context, in *DiffRequest, opts ...grpc.CallOption) (*DiffResponse, error) {
	out := new(DiffResponse)
	err := c.cc.Invoke(ctx, "/lakefs.v1.LakeMetadataTracker/Diff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lakeMetadataTrackerClient) Merge(ctx context.Context, in *MergeRequest, opts ...grpc.CallOption) (*MergeResponse, error) {
	out := new(MergeResponse)
	err := c.cc.Invoke(ctx, "/lakefs.v1.LakeMetadataTracker/Merge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lakeMetadataTrackerClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, "/lakefs.v1.LakeMetadataTracker/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lakeMetadataTrackerClient) Revert(ctx context.Context, in *RevertRequest, opts ...grpc.CallOption) (*RevertResponse, error) {
	out := new(RevertResponse)
	err := c.cc.Invoke(ctx, "/lakefs.v1.LakeMetadataTracker/Revert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LakeMetadataTrackerServer is the server API for LakeMetadataTracker service.
// All implementations must embed UnimplementedLakeMetadataTrackerServer
// for forward compatibility
type LakeMetadataTrackerServer interface {
	PutEntry(context.Context, *PutEntryRequest) (*PutEntryResponse, error)
	GetEntry(context.Context, *GetEntryRequest) (*GetEntryResponse, error)
	DeleteEntry(context.Context, *DeleteEntryRequest) (*DeleteEntryResponse, error)
	ListEntries(context.Context, *ListEntriesRequest) (*ListEntriesResponse, error)
	Commit(context.Context, *CommitRequest) (*CommitResponse, error)
	Log(context.Context, *LogRequest) (*LogResponse, error)
	CreateBranch(context.Context, *CreateBranchRequest) (*CreateBranchResponse, error)
	GetBranch(context.Context, *GetBranchRequest) (*GetBranchResponse, error)
	ListBranches(context.Context, *ListBranchesRequest) (*ListBranchesResponse, error)
	Diff(context.Context, *DiffRequest) (*DiffResponse, error)
	Merge(context.Context, *MergeRequest) (*MergeResponse, error)
	Reset(context.Context, *ResetRequest) (*ResetResponse, error)
	Revert(context.Context, *RevertRequest) (*RevertResponse, error)
	mustEmbedUnimplementedLakeMetadataTrackerServer()
}

// UnimplementedLakeMetadataTrackerServer must be embedded to have forward compatible implementations.
type UnimplementedLakeMetadataTrackerServer struct {
}

func (UnimplementedLakeMetadataTrackerServer) PutEntry(context.Context, *PutEntryRequest) (*PutEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutEntry not implemented")
}
func (UnimplementedLakeMetadataTrackerServer) GetEntry(context.Context, *GetEntryRequest) (*GetEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntry not implemented")
}
func (UnimplementedLakeMetadataTrackerServer) DeleteEntry(context.Context, *DeleteEntryRequest) (*DeleteEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntry not implemented")
}
func (UnimplementedLakeMetadataTrackerServer) ListEntries(context.Context, *ListEntriesRequest) (*ListEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntries not implemented")
}
func (UnimplementedLakeMetadataTrackerServer) Commit(context.Context, *CommitRequest) (*CommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedLakeMetadataTrackerServer) Log(context.Context, *LogRequest) (*LogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedLakeMetadataTrackerServer) CreateBranch(context.Context, *CreateBranchRequest) (*CreateBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBranch not implemented")
}
func (UnimplementedLakeMetadataTrackerServer) GetBranch(context.Context, *GetBranchRequest) (*GetBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranch not implemented")
}
func (UnimplementedLakeMetadataTrackerServer) ListBranches(context.Context, *ListBranchesRequest) (*ListBranchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBranches not implemented")
}
func (UnimplementedLakeMetadataTrackerServer) Diff(context.Context, *DiffRequest) (*DiffResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Diff not implemented")
}
func (UnimplementedLakeMetadataTrackerServer) Merge(context.Context, *MergeRequest) (*MergeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Merge not implemented")
}
func (UnimplementedLakeMetadataTrackerServer) Reset(context.Context, *ResetRequest) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedLakeMetadataTrackerServer) Revert(context.Context, *RevertRequest) (*RevertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revert not implemented")
}
func (UnimplementedLakeMetadataTrackerServer) mustEmbedUnimplementedLakeMetadataTrackerServer() {}

// UnsafeLakeMetadataTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LakeMetadataTrackerServer will
// result in compilation errors.
type UnsafeLakeMetadataTrackerServer interface {
	mustEmbedUnimplementedLakeMetadataTrackerServer()
}

func RegisterLakeMetadataTrackerServer(s grpc.ServiceRegistrar, srv LakeMetadataTrackerServer) {
	s.RegisterService(&_LakeMetadataTracker_serviceDesc, srv)
}

func _LakeMetadataTracker_PutEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LakeMetadataTrackerServer).PutEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lakefs.v1.LakeMetadataTracker/PutEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LakeMetadataTrackerServer).PutEntry(ctx, req.(*PutEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LakeMetadataTracker_GetEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LakeMetadataTrackerServer).GetEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lakefs.v1.LakeMetadataTracker/GetEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LakeMetadataTrackerServer).GetEntry(ctx, req.(*GetEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LakeMetadataTracker_DeleteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LakeMetadataTrackerServer).DeleteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lakefs.v1.LakeMetadataTracker/DeleteEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LakeMetadataTrackerServer).DeleteEntry(ctx, req.(*DeleteEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LakeMetadataTracker_ListEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LakeMetadataTrackerServer).ListEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lakefs.v1.LakeMetadataTracker/ListEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LakeMetadataTrackerServer).ListEntries(ctx, req.(*ListEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LakeMetadataTracker_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LakeMetadataTrackerServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lakefs.v1.LakeMetadataTracker/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LakeMetadataTrackerServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LakeMetadataTracker_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LakeMetadataTrackerServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lakefs.v1.LakeMetadataTracker/Log",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LakeMetadataTrackerServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LakeMetadataTracker_CreateBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LakeMetadataTrackerServer).CreateBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lakefs.v1.LakeMetadataTracker/CreateBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LakeMetadataTrackerServer).CreateBranch(ctx, req.(*CreateBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LakeMetadataTracker_GetBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LakeMetadataTrackerServer).GetBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lakefs.v1.LakeMetadataTracker/GetBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LakeMetadataTrackerServer).GetBranch(ctx, req.(*GetBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LakeMetadataTracker_ListBranches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LakeMetadataTrackerServer).ListBranches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lakefs.v1.LakeMetadataTracker/ListBranches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LakeMetadataTrackerServer).ListBranches(ctx, req.(*ListBranchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LakeMetadataTracker_Diff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LakeMetadataTrackerServer).Diff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lakefs.v1.LakeMetadataTracker/Diff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LakeMetadataTrackerServer).Diff(ctx, req.(*DiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LakeMetadataTracker_Merge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MergeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LakeMetadataTrackerServer).Merge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lakefs.v1.LakeMetadataTracker/Merge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LakeMetadataTrackerServer).Merge(ctx, req.(*MergeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LakeMetadataTracker_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LakeMetadataTrackerServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lakefs.v1.LakeMetadataTracker/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LakeMetadataTrackerServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LakeMetadataTracker_Revert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LakeMetadataTrackerServer).Revert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lakefs.v1.LakeMetadataTracker/Revert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LakeMetadataTrackerServer).Revert(ctx, req.(*RevertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LakeMetadataTracker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lakefs.v1.LakeMetadataTracker",
	HandlerType: (*LakeMetadataTrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutEntry",
			Handler:    _LakeMetadataTracker_PutEntry_Handler,
		},
		{
			MethodName: "GetEntry",
			Handler:    _LakeMetadataTracker_GetEntry_Handler,
		},
		{
			MethodName: "DeleteEntry",
			Handler:    _LakeMetadataTracker_DeleteEntry_Handler,
		},
		{
			MethodName: "ListEntries",
			Handler:    _LakeMetadataTracker_ListEntries_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _LakeMetadataTracker_Commit_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _LakeMetadataTracker_Log_Handler,
		},
		{
			MethodName: "CreateBranch",
			Handler:    _LakeMetadataTracker_CreateBranch_Handler,
		},
		{
			MethodName: "GetBranch",
			Handler:    _LakeMetadataTracker_GetBranch_Handler,
		},
		{
			MethodName: "ListBranches",
			Handler:    _LakeMetadataTracker_ListBranches_Handler,
		},
		{
			MethodName: "Diff",
			Handler:    _LakeMetadataTracker_Diff_Handler,
		},
		{
			MethodName: "Merge",
			Handler:    _LakeMetadataTracker_Merge_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _LakeMetadataTracker_Reset_Handler,
		},
		{
			MethodName: "Revert",
			Handler:    _LakeMetadataTracker_Revert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lmt/lmt.proto",
}
